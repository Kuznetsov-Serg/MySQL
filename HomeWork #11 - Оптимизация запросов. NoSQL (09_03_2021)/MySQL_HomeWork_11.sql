/*
Курс: Основы реляционных баз данных. MySQL
Урок 11. Оптимизация запросов. NoSQL
Выполнил: Кузнецов Сергей (Факультет Geek University Python-разработки)

===============================================================================
Домашнее задание:

Практическое задание по теме “Оптимизация запросов”
1.	Создайте таблицу logs типа Archive. Пусть при каждом создании записи в таблицах users, 
	catalogs и products в таблицу logs помещается время и дата создания записи, название таблицы, 
	идентификатор первичного ключа и содержимое поля name.
2.	(по желанию) Создайте SQL-запрос, который помещает в таблицу users миллион записей.

Практическое задание по теме “NoSQL”
3.	В базе данных Redis подберите коллекцию для подсчета посещений с определенных IP-адресов.
4.	При помощи базы данных Redis решите задачу поиска имени пользователя по электронному адресу 
	и наоборот, поиск электронного адреса пользователя по его имени.
5.	Организуйте хранение категорий и товарных позиций учебной базы данных shop в СУБД MongoDB.
===============================================================================
*/
/*
===============================================================================
1.	Создайте таблицу logs типа Archive. Пусть при каждом создании записи в таблицах users, 
	catalogs и products в таблицу logs помещается время и дата создания записи, название таблицы, 
	идентификатор первичного ключа и содержимое поля name.
===============================================================================
*/
-- Создаем БД «CREATE DATABASE lesson_11;». В принципе, можно все и в БД «lesson_08», 
-- но потренируемся в копировании БД. 
DROP DATABASE IF EXISTS lesson_11;
CREATE DATABASE lesson_11;

-- Прогружаем в нее прилагаемый дамп «mysql lesson_11 < shop.sql».

-- Создаем таблицу логгирования добавления записей в users, catalogs и products
-- lesson_11.logs definition
DROP TABLE IF EXISTS logs;
CREATE TABLE logs (
  created_at datetime DEFAULT CURRENT_TIMESTAMP COMMENT 'Время создания строки',
  name_table varchar(20) NOT NULL COMMENT 'название таблицы',
  table_id bigint unsigned NOT NULL COMMENT 'идентификатор первичного ключа в таблице',
  table_name varchar(255) DEFAULT NULL COMMENT 'содержимое поля name в таблице'
) COMMENT='Таблица логгирования добавления записей в users, catalogs и products' ENGINE=ARCHIVE;

-- Создаем основную процедуру логгирования 
DROP PROCEDURE IF EXISTS LOG_INSERT;

DELIMITER //
CREATE PROCEDURE log_insert (IN name_table VARCHAR(20), IN table_id BIGINT, IN table_name VARCHAR(255))
BEGIN
	INSERT INTO logs(name_table, table_id, table_name) VALUES (name_table, table_id, table_name);
END//
DELIMITER ;

-- Активируем три триггера на вставку строк в таблицы users, catalogs и products.
DROP TRIGGER IF EXISTS users_insert;
DROP TRIGGER IF EXISTS users_insert;
DROP TRIGGER IF EXISTS users_insert;

DELIMITER //
CREATE TRIGGER users_insert AFTER INSERT ON users 
FOR EACH ROW BEGIN
  	CALL log_insert('users', NEW.id, NEW.name);
END//
DELIMITER ;

DELIMITER //
CREATE TRIGGER catalogs_insert AFTER INSERT ON catalogs 
FOR EACH ROW BEGIN
  	CALL log_insert('catalogs', NEW.id, NEW.name);
END//
DELIMITER ;

DELIMITER //
CREATE TRIGGER products_insert AFTER INSERT ON products 
FOR EACH ROW BEGIN
  	CALL log_insert('products', NEW.id, NEW.name);
END//
DELIMITER ;

-- Произведем добавление в отслеживаемые таблицы по паре записей.
INSERT INTO users (name, birthday_at) VALUES
  ('Арсений', '1990-10-05'),
  ('Михаил', '1984-11-12'),
  ('Святогор', '1992-08-29');

INSERT INTO catalogs VALUES
  (NULL, 'Корпуса'),
  (NULL, 'SSD-диски');

INSERT INTO products
  (name, description, price, catalog_id)
VALUES
  ('Samsung 860 EVO 500GB', 'SSD-диск SAMSUNG, V-NANG, SATA M.2', 5600.00, 2);

-- Проверяем содержимое лог-таблицы (заполнилась) – цель достигнута.
SELECT * FROM LOGS;
SELECT * FROM LOGS LIMIT 990000,100;

/*
===============================================================================
2.	(по желанию) Создайте SQL-запрос, который помещает в таблицу users миллион записей.
===============================================================================
*/
-- ############################################################################
-- Вариант 1 (все одним запросом, без вспомогательных таблиц)
-- ############################################################################

-- Сформируем SELECT дающий 1млн записей. (т.к. такой большой таблицы у нас нет "под рукой"). 
-- Воспользуемся объединением (union all), для получения 10 значений и пересечением для умножения на такой-же набор 10... 
-- Нам потребуется 10*10..*10(6 раз) для получения 1 000 000. Проверяем – все верно, возвращает 1млн записей.
SELECT count(a.N)
  FROM 
	(SELECT 0 AS N UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) a,
	(SELECT 0 AS N UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) b,
	(SELECT 0 AS N UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) c,
	(SELECT 0 AS N UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) d,
	(SELECT 0 AS N UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) e,
	(SELECT 0 AS N UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) f;

-- После этого, сформируем выборку из значений name (громоздко конечно, но есть куда стремиться)
-- Можно было и по имеющейся в таблице выборке или сформировать временную таблицу и брать из нее 
-- (более изящно, но по условиям задания - все "одним запросом" , так что не в этот раз) 
-- «SELECT * FROM users ORDER by rand() LIMIT 1;»
SELECT name
  FROM 
 	(
 	select 'Петя' AS name
 	union ALL select 'Вася'
 	union ALL select 'Юра'
 	union ALL select 'Сергей'
 	union ALL select 'Ольга'
 	union ALL select 'Маша'
 	) f ORDER by rand() LIMIT 1;

-- Подготовим рандомную дату рождения (от 20 лет +60 лет, т.е. до 80 лет)
SELECT curdate() - INTERVAL floor(7300 + rand() * 21900) DAY birthday_at;

-- Пришло время сконструировать итоговый INSERT на «1 000 000» записей. 
-- Конечно, по-хорошему, нужно отключить индексы на период выполнения запроса, чтобы не потратить много времени… 
-- и ... сначала тестируем на 10 записях – все ок. 
TRUNCATE users;	-- Для чистоты, обнулим таблицу и счетчики

INSERT INTO users (name, birthday_at)
  SELECT
  	(SELECT name
  	  FROM
  	  	(
	 	select 'Петя' AS name
	 	union ALL select 'Вася'
	 	union ALL select 'Юра'
	 	union ALL select 'Сергей'
	 	union ALL select 'Ольга'
	 	union ALL select 'Маша'
  	  	) f ORDER by rand() LIMIT 1),
  	  	(SELECT curdate() - INTERVAL floor(7300 + rand() * 21900) DAY birthday_at)
  FROM 
  (
	SELECT a.N
	  FROM 
		(SELECT 0 AS N UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) a,
		(SELECT 0 AS N UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) b,
		(SELECT 0 AS N UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) c,
		(SELECT 0 AS N UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) d,
		(SELECT 0 AS N UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) e,
		(SELECT 0 AS N UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) f
  ) t;

-- Запрос выполнялся (1000000 row(s) updated - 1m 48s). 
-- Проверим
SELECT * FROM users LIMIT 100;
SELECT count(*) FROM users;
-- посмотрим, что с логами - тоже добавлено 1 000 000 записей, 
SELECT count(*) FROM logs;
-- но все от одного времени создания, т.е. оптимизатор не растягивал "удовольствие" на 1млн попыток
SELECT * FROM LOGS LIMIT 990000,100;


-- ############################################################################
-- Вариант 2 (с использованием вспомогательной таблицы)
-- ############################################################################

-- Создадим таблицу для хранения вариантов имен (не менее 10 строк).
-- Временная таблица не подходит ввиду ограничения mySQL "Can't reopen table" при попытке использовать таблицу более одного раза в рамках одного запроса.
DROP TABLE iv EXISTS name_v;
CREATE TABLE name_v (name VARCHAR(20) NOT NULL); 

-- Добавим в нее несколько значений:
INSERT INTO name_v VALUES ('Василий'), ('Юрий'), ('Сергей'), ('Ольга'), ('Маша'), ('Пётр'), ('Борис'), ('Иннокентий'), ('Наталья'), ('Ксения'), ('Изабелла'), ('Иосиф');

-- По аналогии с первым вариантом, сформируем итоговый запрос (выглядит короче и понятнее):
INSERT INTO users (name, birthday_at) 
  SELECT 
	(SELECT name FROM name_v ORDER by rand() LIMIT 1),
	(SELECT curdate() - INTERVAL floor(7300 + rand() * 21900) DAY birthday_at)
  FROM
  (
	SELECT a.N
	  FROM 
		(SELECT 1 AS N FROM name_v LIMIT 10) a,
		(select 2 FROM name_v LIMIT 10) b,
		(select 3 FROM name_v LIMIT 10) c,
		(select 4 FROM name_v LIMIT 10) d,
		(select 4 FROM name_v LIMIT 10) e,
		(select 5 FROM name_v LIMIT 10) f
) t;
-- Запрос выполнялся (1000000 row(s) updated - 2m 21s). 
-- Проверим 
SELECT * FROM users LIMIT 100;
SELECT count(*) FROM users;


-- ############################################################################
-- Вариант 3 (с использованием процедуры)
-- ############################################################################

-- Самый простой, с т.з. логики вариант. Создаем процедуру:
DROP PROCEDURE IF EXISTS proc_insert; 

DELIMITER //
CREATE PROCEDURE proc_insert (IN num_str int) 
BEGIN
  DECLARE v1 INT DEFAULT 1;
  WHILE v1 <= num_str DO
	INSERT INTO users (name, birthday_at) VALUES (  
	  	(SELECT name FROM name_v ORDER by rand() LIMIT 1),
		(SELECT curdate() - INTERVAL floor(7300 + rand() * 21900) DAY birthday_at));
    SET v1 = v1 + 1;
  END WHILE;	
END//
DELIMITER ;

-- Запускаем на исполнение  
CALL proc_insert(1000000);

-- за час работы, запрос процедура вставила порядка 500тыс записей 
SELECT * FROM users LIMIT 100;
SELECT count(*) FROM users;

SELECT count(*) FROM LOGS;


                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   